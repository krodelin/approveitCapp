//
//  RequestStyleKit.m
//  Approve it!
//
//  Created by Udo Schneider on 25/01/15.
//  Copyright (c) 2015 Krodelin Software Solutions. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

@import <Foundation/Foundation.j>
@import <AppKit/AppKit.j>
@import "StyleKitMock.j"



@implementation RequestStyleKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawGraph_textWithStatus: (CPString)status
{
    //// Color Declarations
    var current = [CPColor colorWithCalibratedRed: 0.63 green: 0.785 blue: 0.858 alpha: 1],
        other = [CPColor colorWithCalibratedRed: 0.864 green: 0.864 blue: 0.864 alpha: 1];
    //// Variable Declarations
    var pending_color = [status isEqualToString: @"pending"] ? current : other,
        approved_color = [status isEqualToString: @"approved"] ? current : other;    var rejected_color = [status isEqualToString: @"rejected"] ? current : other,
        waiting_color = [status isEqualToString: @"waiting"] ? current : other;    var finished_color = [status isEqualToString: @"finished"] ? current : other;

    //// pending
    {
        //// Oval 2 Drawing
        var oval2Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(6.54, 94.05, 106.92, 47.99)];
        [pending_color setFill];
        [oval2Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval2Path setLineWidth: 1];
        [oval2Path stroke];


        //// Rectangle 2 Drawing
        var rectangle2Rect = CPMakeRect(-5.32, 94.01, 130.65, 37.33),
            rectangle2Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle2Style set_alignment:CPCenterTextAlignment];

        var rectangle2FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle2Style};

        [@"pending" drawInRect: CGRectOffset(rectangle2Rect, 0, 1) withAttributes: rectangle2FontAttributes];
    }


    //// approved
    {
        //// Oval 4 Drawing
        var oval4Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(224.41, 212.68, 119.18, 47.99)];
        [approved_color setFill];
        [oval4Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval4Path setLineWidth: 1];
        [oval4Path stroke];


        //// Rectangle 4 Drawing
        var rectangle4Rect = CPMakeRect(209.34, 212.64, 149.31, 37.33),
            rectangle4Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle4Style set_alignment:CPCenterTextAlignment];

        var rectangle4FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle4Style};

        [@"approved" drawInRect: CGRectOffset(rectangle4Rect, 0, 1) withAttributes: rectangle4FontAttributes];
    }


    //// approve
    {
        //// Bezier 4 Drawing
        var bezier4Path = [CPBezierPath bezierPath];
        [bezier4Path moveToPoint: CPMakePoint(79.91, 140.44)];
        [bezier4Path curveToPoint: CPMakePoint(138.67, 191.36) controlPoint1: CPMakePoint(94.41, 156.64) controlPoint2: CPMakePoint(115.86, 177.94)];
        [bezier4Path curveToPoint: CPMakePoint(216.96, 222.74) controlPoint1: CPMakePoint(162.61, 205.44) controlPoint2: CPMakePoint(191.42, 215.64)];
        [bezier4Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier4Path setLineWidth: 1];
        [bezier4Path stroke];


        //// Bezier 6 Drawing
        var bezier6Path = [CPBezierPath bezierPath];
        [bezier6Path moveToPoint: CPMakePoint(215.89, 227.29)];
        [bezier6Path lineToPoint: CPMakePoint(229.97, 226.18)];
        [bezier6Path lineToPoint: CPMakePoint(218.28, 218.27)];
        [bezier6Path lineToPoint: CPMakePoint(215.89, 227.29)];
        [bezier6Path closePath];
        [bezier6Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier6Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier6Path setLineWidth: 1];
        [bezier6Path stroke];


        //// Rectangle 6 Drawing
        var rectangle6Rect = CPMakeRect(104.01, 202.65, 130.65, 37.33),
            rectangle6Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle6Style set_alignment:CPCenterTextAlignment];

        var rectangle6FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle6Style};

        [@"approve" drawInRect: CGRectOffset(rectangle6Rect, 0, 1) withAttributes: rectangle6FontAttributes];
    }


    //// rejected
    {
        //// Oval 6 Drawing
        var oval6Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(230.94, 126.04, 106.12, 47.99)];
        [rejected_color setFill];
        [oval6Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval6Path setLineWidth: 1];
        [oval6Path stroke];


        //// Rectangle 8 Drawing
        var rectangle8Rect = CPMakeRect(209.34, 126, 149.31, 37.33),
            rectangle8Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle8Style set_alignment:CPCenterTextAlignment];

        var rectangle8FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle8Style};

        [@"rejected" drawInRect: CGRectOffset(rectangle8Rect, 0, 1) withAttributes: rectangle8FontAttributes];
    }


    //// reject
    {
        //// Bezier 8 Drawing
        var bezier8Path = [CPBezierPath bezierPath];
        [bezier8Path moveToPoint: CPMakePoint(88.8, 138.32)];
        [bezier8Path curveToPoint: CPMakePoint(138.67, 162.03) controlPoint1: CPMakePoint(102.94, 147.5) controlPoint2: CPMakePoint(120.9, 157.33)];
        [bezier8Path curveToPoint: CPMakePoint(223.9, 163.84) controlPoint1: CPMakePoint(166.13, 169.3) controlPoint2: CPMakePoint(197.48, 167.78)];
        [bezier8Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier8Path setLineWidth: 1];
        [bezier8Path stroke];


        //// Bezier 10 Drawing
        var bezier10Path = [CPBezierPath bezierPath];
        [bezier10Path moveToPoint: CPMakePoint(224.85, 168.41)];
        [bezier10Path lineToPoint: CPMakePoint(237.22, 161.59)];
        [bezier10Path lineToPoint: CPMakePoint(223.3, 159.21)];
        [bezier10Path lineToPoint: CPMakePoint(224.85, 168.41)];
        [bezier10Path closePath];
        [bezier10Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier10Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier10Path setLineWidth: 1];
        [bezier10Path stroke];


        //// Rectangle 10 Drawing
        var rectangle10Rect = CPMakeRect(113.34, 152, 111.98, 37.33),
            rectangle10Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle10Style set_alignment:CPCenterTextAlignment];

        var rectangle10FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle10Style};

        [@"reject" drawInRect: CGRectOffset(rectangle10Rect, 0, 1) withAttributes: rectangle10FontAttributes];
    }


    //// waiting
    {
        //// Oval 8 Drawing
        var oval8Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(233.47, 51.4, 101.05, 47.99)];
        [waiting_color setFill];
        [oval8Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval8Path setLineWidth: 1];
        [oval8Path stroke];


        //// Rectangle 12 Drawing
        var rectangle12Rect = CPMakeRect(218.68, 51.36, 130.65, 37.33),
            rectangle12Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle12Style set_alignment:CPCenterTextAlignment];

        var rectangle12FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle12Style};

        [@"waiting" drawInRect: CGRectOffset(rectangle12Rect, 0, 1) withAttributes: rectangle12FontAttributes];
    }


    //// request
    {
        //// Bezier 12 Drawing
        var bezier12Path = [CPBezierPath bezierPath];
        [bezier12Path moveToPoint: CPMakePoint(109.91, 108.68)];
        [bezier12Path curveToPoint: CPMakePoint(223.72, 86.75) controlPoint1: CPMakePoint(143.42, 102.23) controlPoint2: CPMakePoint(188.16, 93.6)];
        [bezier12Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier12Path setLineWidth: 1];
        [bezier12Path stroke];


        //// Bezier 14 Drawing
        var bezier14Path = [CPBezierPath bezierPath];
        [bezier14Path moveToPoint: CPMakePoint(224.64, 91.32)];
        [bezier14Path lineToPoint: CPMakePoint(236.85, 84.22)];
        [bezier14Path lineToPoint: CPMakePoint(222.88, 82.16)];
        [bezier14Path lineToPoint: CPMakePoint(224.64, 91.32)];
        [bezier14Path closePath];
        [bezier14Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier14Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier14Path setLineWidth: 1];
        [bezier14Path stroke];


        //// Rectangle 14 Drawing
        var rectangle14Rect = CPMakeRect(104.01, 88.01, 130.65, 37.33),
            rectangle14Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle14Style set_alignment:CPCenterTextAlignment];

        var rectangle14FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle14Style};

        [@"request" drawInRect: CGRectOffset(rectangle14Rect, 0, 1) withAttributes: rectangle14FontAttributes];
    }


    //// finished
    {
        //// Oval 10 Drawing
        var oval10Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(434.94, 44.73, 106.12, 47.99)];
        [finished_color setFill];
        [oval10Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval10Path setLineWidth: 1];
        [oval10Path stroke];


        //// Rectangle 16 Drawing
        var rectangle16Rect = CPMakeRect(413.34, 44.69, 149.31, 37.33),
            rectangle16Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle16Style set_alignment:CPCenterTextAlignment];

        var rectangle16FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle16Style};

        [@"finished" drawInRect: CGRectOffset(rectangle16Rect, 0, 1) withAttributes: rectangle16FontAttributes];
    }


    //// finish
    {
        //// Bezier 16 Drawing
        var bezier16Path = [CPBezierPath bezierPath];
        [bezier16Path moveToPoint: CPMakePoint(311.24, 215.06)];
        [bezier16Path curveToPoint: CPMakePoint(450.86, 98.6) controlPoint1: CPMakePoint(346.77, 185.42) controlPoint2: CPMakePoint(410.77, 132.04)];
        [bezier16Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier16Path setLineWidth: 1];
        [bezier16Path stroke];


        //// Bezier 18 Drawing
        var bezier18Path = [CPBezierPath bezierPath];
        [bezier18Path moveToPoint: CPMakePoint(454.24, 101.85)];
        [bezier18Path lineToPoint: CPMakePoint(461.49, 89.73)];
        [bezier18Path lineToPoint: CPMakePoint(448.26, 94.69)];
        [bezier18Path lineToPoint: CPMakePoint(454.24, 101.85)];
        [bezier18Path closePath];
        [bezier18Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier18Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier18Path setLineWidth: 1];
        [bezier18Path stroke];


        //// Rectangle 18 Drawing
        var rectangle18Rect = CPMakeRect(333.34, 148, 111.98, 37.33),
            rectangle18Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle18Style set_alignment:CPCenterTextAlignment];

        var rectangle18FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle18Style};

        [@"finish" drawInRect: CGRectOffset(rectangle18Rect, 0, 1) withAttributes: rectangle18FontAttributes];
    }


    //// reopen2
    {
        //// Bezier 20 Drawing
        var bezier20Path = [CPBezierPath bezierPath];
        [bezier20Path moveToPoint: CPMakePoint(233.4, 142.91)];
        [bezier20Path curveToPoint: CPMakePoint(124.86, 127.23) controlPoint1: CPMakePoint(201.4, 138.29) controlPoint2: CPMakePoint(159.37, 132.21)];
        [bezier20Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier20Path setLineWidth: 1];
        [bezier20Path stroke];


        //// Bezier 22 Drawing
        var bezier22Path = [CPBezierPath bezierPath];
        [bezier22Path moveToPoint: CPMakePoint(125.42, 122.59)];
        [bezier22Path lineToPoint: CPMakePoint(111.56, 125.3)];
        [bezier22Path lineToPoint: CPMakePoint(124.09, 131.83)];
        [bezier22Path lineToPoint: CPMakePoint(125.42, 122.59)];
        [bezier22Path closePath];
        [bezier22Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier22Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier22Path setLineWidth: 1];
        [bezier22Path stroke];


        //// Rectangle 20 Drawing
        var rectangle20Rect = CPMakeRect(113.34, 122.67, 111.98, 37.33),
            rectangle20Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle20Style set_alignment:CPCenterTextAlignment];

        var rectangle20FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle20Style};

        [@"reopen" drawInRect: CGRectOffset(rectangle20Rect, 0, 1) withAttributes: rectangle20FontAttributes];
    }


    //// provide
    {
        //// Bezier 24 Drawing
        var bezier24Path = [CPBezierPath bezierPath];
        [bezier24Path moveToPoint: CPMakePoint(250.3, 57.44)];
        [bezier24Path curveToPoint: CPMakePoint(138.67, 43.4) controlPoint1: CPMakePoint(220.5, 43.4) controlPoint2: CPMakePoint(175.47, 28.54)];
        [bezier24Path curveToPoint: CPMakePoint(85.68, 84.74) controlPoint1: CPMakePoint(117.72, 51.86) controlPoint2: CPMakePoint(99.29, 69.01)];
        [bezier24Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier24Path setLineWidth: 1];
        [bezier24Path stroke];


        //// Bezier 26 Drawing
        var bezier26Path = [CPBezierPath bezierPath];
        [bezier26Path moveToPoint: CPMakePoint(81.89, 82.01)];
        [bezier26Path lineToPoint: CPMakePoint(77.06, 95.28)];
        [bezier26Path lineToPoint: CPMakePoint(89.11, 87.92)];
        [bezier26Path lineToPoint: CPMakePoint(81.89, 82.01)];
        [bezier26Path closePath];
        [bezier26Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier26Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier26Path setLineWidth: 1];
        [bezier26Path stroke];


        //// Rectangle 22 Drawing
        var rectangle22Rect = CPMakeRect(104.01, 29.37, 130.65, 37.33),
            rectangle22Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle22Style set_alignment:CPCenterTextAlignment];

        var rectangle22FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle22Style};

        [@"provide" drawInRect: CGRectOffset(rectangle22Rect, 0, 1) withAttributes: rectangle22FontAttributes];
    }


    //// reopen1
    {
        //// Bezier 28 Drawing
        var bezier28Path = [CPBezierPath bezierPath];
        [bezier28Path moveToPoint: CPMakePoint(450.03, 51.93)];
        [bezier28Path curveToPoint: CPMakePoint(138.67, 31.4) controlPoint1: CPMakePoint(383.61, 24.15) controlPoint2: CPMakePoint(240.75, -23.16)];
        [bezier28Path curveToPoint: CPMakePoint(83.08, 83.64) controlPoint1: CPMakePoint(115.99, 43.53) controlPoint2: CPMakePoint(96.71, 65.07)];
        [bezier28Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier28Path setLineWidth: 1];
        [bezier28Path stroke];


        //// Bezier 30 Drawing
        var bezier30Path = [CPBezierPath bezierPath];
        [bezier30Path moveToPoint: CPMakePoint(79.15, 81.12)];
        [bezier30Path lineToPoint: CPMakePoint(75.34, 94.71)];
        [bezier30Path lineToPoint: CPMakePoint(86.8, 86.46)];
        [bezier30Path lineToPoint: CPMakePoint(79.15, 81.12)];
        [bezier30Path closePath];
        [bezier30Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier30Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier30Path setLineWidth: 1];
        [bezier30Path stroke];


        //// Rectangle 24 Drawing
        var rectangle24Rect = CPMakeRect(228.01, 2.71, 111.98, 37.33),
            rectangle24Style = [[CPMutableParagraphStyle defaultParagraphStyle] mutableCopy];        [rectangle24Style set_alignment:CPCenterTextAlignment];

        var rectangle24FontAttributes = @{CPFontAttributeName: [CPFont fontWithName: @"Times-Roman" size: 18.66], CPForegroundColorAttributeName: [CPColor blackColor], CPParagraphStyleAttributeName: rectangle24Style};

        [@"reopen" drawInRect: CGRectOffset(rectangle24Rect, 0, 1) withAttributes: rectangle24FontAttributes];
    }
}

+ (void)drawGraph_overlayWithStatus: (CPString)status
{
    //// Color Declarations
    var current = [CPColor colorWithCalibratedRed: 0.63 green: 0.785 blue: 0.858 alpha: 1],
        other = [CPColor colorWithCalibratedRed: 0.864 green: 0.864 blue: 0.864 alpha: 1];
    //// Image Declarations
    var graph_rasterized_overlay = CPImageInBundle(@"graph_rasterized_overlay.png");
    [graph_rasterized_overlay setSize:CPMakeSize(547,266)];

    //// Variable Declarations
    var pending_color = [status isEqualToString: @"pending"] ? current : other,
        approved_color = [status isEqualToString: @"approved"] ? current : other;    var rejected_color = [status isEqualToString: @"rejected"] ? current : other,
        waiting_color = [status isEqualToString: @"waiting"] ? current : other;    var finished_color = [status isEqualToString: @"finished"] ? current : other;

    //// pending
    {
        //// Oval 2 Drawing
        var oval2Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(6.54, 123.96, 106.92, 47.99)];
        [pending_color setFill];
        [oval2Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval2Path setLineWidth: 1];
        [oval2Path stroke];
    }


    //// approved
    {
        //// Oval 4 Drawing
        var oval4Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(224.41, 5.33, 119.18, 47.99)];
        [approved_color setFill];
        [oval4Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval4Path setLineWidth: 1];
        [oval4Path stroke];
    }


    //// approve
    {
        //// Bezier 4 Drawing
        var bezier4Path = [CPBezierPath bezierPath];
        [bezier4Path moveToPoint: CPMakePoint(79.91, 125.56)];
        [bezier4Path curveToPoint: CPMakePoint(138.67, 74.64) controlPoint1: CPMakePoint(94.41, 109.36) controlPoint2: CPMakePoint(115.86, 88.06)];
        [bezier4Path curveToPoint: CPMakePoint(216.96, 43.26) controlPoint1: CPMakePoint(162.61, 60.56) controlPoint2: CPMakePoint(191.42, 50.36)];
        [bezier4Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier4Path setLineWidth: 1];
        [bezier4Path stroke];


        //// Bezier 6 Drawing
        var bezier6Path = [CPBezierPath bezierPath];
        [bezier6Path moveToPoint: CPMakePoint(215.89, 38.71)];
        [bezier6Path lineToPoint: CPMakePoint(229.97, 39.82)];
        [bezier6Path lineToPoint: CPMakePoint(218.28, 47.73)];
        [bezier6Path lineToPoint: CPMakePoint(215.89, 38.71)];
        [bezier6Path closePath];
        [bezier6Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier6Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier6Path setLineWidth: 1];
        [bezier6Path stroke];
    }


    //// rejected
    {
        //// Oval 6 Drawing
        var oval6Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(230.94, 91.97, 106.12, 47.99)];
        [rejected_color setFill];
        [oval6Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval6Path setLineWidth: 1];
        [oval6Path stroke];
    }


    //// reject
    {
        //// Bezier 8 Drawing
        var bezier8Path = [CPBezierPath bezierPath];
        [bezier8Path moveToPoint: CPMakePoint(88.8, 127.68)];
        [bezier8Path curveToPoint: CPMakePoint(138.67, 103.97) controlPoint1: CPMakePoint(102.94, 118.5) controlPoint2: CPMakePoint(120.9, 108.67)];
        [bezier8Path curveToPoint: CPMakePoint(223.9, 102.16) controlPoint1: CPMakePoint(166.13, 96.7) controlPoint2: CPMakePoint(197.48, 98.22)];
        [bezier8Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier8Path setLineWidth: 1];
        [bezier8Path stroke];


        //// Bezier 10 Drawing
        var bezier10Path = [CPBezierPath bezierPath];
        [bezier10Path moveToPoint: CPMakePoint(224.85, 97.59)];
        [bezier10Path lineToPoint: CPMakePoint(237.22, 104.41)];
        [bezier10Path lineToPoint: CPMakePoint(223.3, 106.79)];
        [bezier10Path lineToPoint: CPMakePoint(224.85, 97.59)];
        [bezier10Path closePath];
        [bezier10Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier10Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier10Path setLineWidth: 1];
        [bezier10Path stroke];
    }


    //// waiting
    {
        //// Oval 8 Drawing
        var oval8Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(233.47, 166.62, 101.05, 47.99)];
        [waiting_color setFill];
        [oval8Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval8Path setLineWidth: 1];
        [oval8Path stroke];
    }


    //// request
    {
        //// Bezier 12 Drawing
        var bezier12Path = [CPBezierPath bezierPath];
        [bezier12Path moveToPoint: CPMakePoint(109.91, 157.32)];
        [bezier12Path curveToPoint: CPMakePoint(223.72, 179.25) controlPoint1: CPMakePoint(143.42, 163.77) controlPoint2: CPMakePoint(188.16, 172.4)];
        [bezier12Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier12Path setLineWidth: 1];
        [bezier12Path stroke];


        //// Bezier 14 Drawing
        var bezier14Path = [CPBezierPath bezierPath];
        [bezier14Path moveToPoint: CPMakePoint(224.64, 174.68)];
        [bezier14Path lineToPoint: CPMakePoint(236.85, 181.78)];
        [bezier14Path lineToPoint: CPMakePoint(222.88, 183.84)];
        [bezier14Path lineToPoint: CPMakePoint(224.64, 174.68)];
        [bezier14Path closePath];
        [bezier14Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier14Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier14Path setLineWidth: 1];
        [bezier14Path stroke];
    }


    //// finished
    {
        //// Oval 10 Drawing
        var oval10Path = [CPBezierPath bezierPathWithOvalInRect: CPMakeRect(434.94, 173.28, 106.12, 47.99)];
        [finished_color setFill];
        [oval10Path fill];
        [[[CPColor blackColor] setStroke]];
        [oval10Path setLineWidth: 1];
        [oval10Path stroke];
    }


    //// finish
    {
        //// Bezier 16 Drawing
        var bezier16Path = [CPBezierPath bezierPath];
        [bezier16Path moveToPoint: CPMakePoint(311.24, 50.94)];
        [bezier16Path curveToPoint: CPMakePoint(450.86, 167.4) controlPoint1: CPMakePoint(346.77, 80.58) controlPoint2: CPMakePoint(410.77, 133.96)];
        [bezier16Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier16Path setLineWidth: 1];
        [bezier16Path stroke];


        //// Bezier 18 Drawing
        var bezier18Path = [CPBezierPath bezierPath];
        [bezier18Path moveToPoint: CPMakePoint(454.24, 164.15)];
        [bezier18Path lineToPoint: CPMakePoint(461.49, 176.27)];
        [bezier18Path lineToPoint: CPMakePoint(448.26, 171.31)];
        [bezier18Path lineToPoint: CPMakePoint(454.24, 164.15)];
        [bezier18Path closePath];
        [bezier18Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier18Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier18Path setLineWidth: 1];
        [bezier18Path stroke];
    }


    //// reopen2
    {
        //// Bezier 20 Drawing
        var bezier20Path = [CPBezierPath bezierPath];
        [bezier20Path moveToPoint: CPMakePoint(233.4, 123.09)];
        [bezier20Path curveToPoint: CPMakePoint(124.86, 138.77) controlPoint1: CPMakePoint(201.4, 127.71) controlPoint2: CPMakePoint(159.37, 133.79)];
        [bezier20Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier20Path setLineWidth: 1];
        [bezier20Path stroke];


        //// Bezier 22 Drawing
        var bezier22Path = [CPBezierPath bezierPath];
        [bezier22Path moveToPoint: CPMakePoint(125.42, 143.41)];
        [bezier22Path lineToPoint: CPMakePoint(111.56, 140.7)];
        [bezier22Path lineToPoint: CPMakePoint(124.09, 134.17)];
        [bezier22Path lineToPoint: CPMakePoint(125.42, 143.41)];
        [bezier22Path closePath];
        [bezier22Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier22Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier22Path setLineWidth: 1];
        [bezier22Path stroke];
    }


    //// provide
    {
        //// Bezier 24 Drawing
        var bezier24Path = [CPBezierPath bezierPath];
        [bezier24Path moveToPoint: CPMakePoint(250.3, 208.56)];
        [bezier24Path curveToPoint: CPMakePoint(138.67, 222.6) controlPoint1: CPMakePoint(220.5, 222.6) controlPoint2: CPMakePoint(175.47, 237.46)];
        [bezier24Path curveToPoint: CPMakePoint(85.68, 181.26) controlPoint1: CPMakePoint(117.72, 214.14) controlPoint2: CPMakePoint(99.29, 196.99)];
        [bezier24Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier24Path setLineWidth: 1];
        [bezier24Path stroke];


        //// Bezier 26 Drawing
        var bezier26Path = [CPBezierPath bezierPath];
        [bezier26Path moveToPoint: CPMakePoint(81.89, 183.99)];
        [bezier26Path lineToPoint: CPMakePoint(77.06, 170.72)];
        [bezier26Path lineToPoint: CPMakePoint(89.11, 178.08)];
        [bezier26Path lineToPoint: CPMakePoint(81.89, 183.99)];
        [bezier26Path closePath];
        [bezier26Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier26Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier26Path setLineWidth: 1];
        [bezier26Path stroke];
    }


    //// reopen1
    {
        //// Bezier 28 Drawing
        var bezier28Path = [CPBezierPath bezierPath];
        [bezier28Path moveToPoint: CPMakePoint(450.03, 214.07)];
        [bezier28Path curveToPoint: CPMakePoint(138.67, 234.6) controlPoint1: CPMakePoint(383.61, 241.85) controlPoint2: CPMakePoint(240.75, 289.16)];
        [bezier28Path curveToPoint: CPMakePoint(83.08, 182.36) controlPoint1: CPMakePoint(115.99, 222.47) controlPoint2: CPMakePoint(96.71, 200.93)];
        [bezier28Path setMiterLimit: 4];
        [[[CPColor blackColor] setStroke]];
        [bezier28Path setLineWidth: 1];
        [bezier28Path stroke];


        //// Bezier 30 Drawing
        var bezier30Path = [CPBezierPath bezierPath];
        [bezier30Path moveToPoint: CPMakePoint(79.15, 184.88)];
        [bezier30Path lineToPoint: CPMakePoint(75.34, 171.29)];
        [bezier30Path lineToPoint: CPMakePoint(86.8, 179.54)];
        [bezier30Path lineToPoint: CPMakePoint(79.15, 184.88)];
        [bezier30Path closePath];
        [bezier30Path setMiterLimit: 4];
        [[[CPColor blackColor] setFill]];
        [bezier30Path fill];
        [[[CPColor blackColor] setStroke]];
        [bezier30Path setLineWidth: 1];
        [bezier30Path stroke];
    }


    //// graph_rasterized_overlay 2 Drawing
    var graph_rasterized_overlay2Path = [CPBezierPath bezierPathWithRect: CPMakeRect(0, 0, 547, 266)];
    [CPGraphicsContext saveGraphicsState];
    [graph_rasterized_overlay2Path addClip];
    [graph_rasterized_overlay drawInRect: CPMakeRect(0, 1, [graph_rasterized_overlay size].width, [graph_rasterized_overlay size].height) fromRect: CPZeroRect operation: CPCompositeSourceOver fraction: 1 respectFlipped: YES hints: nil];
    [CPGraphicsContext restoreGraphicsState];
}

@end
